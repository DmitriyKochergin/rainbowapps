{"version":3,"sources":["common/AppContext.tsx","common/utils/historyUtils.ts","components/common/LeftMenu/LeftMenu.tsx","components/common/AppPageContext.tsx","components/common/Header/Header.tsx","common/axios/index.ts","components/common/Error/Error.tsx","components/common/AuthLayout.tsx","components/common/AppPage.tsx","components/routes/Private/UserOnline.tsx","components/Dashboard/ForKids/ForKids.tsx","components/Dashboard/Crocodile/Crocodile.tsx","components/App.tsx","common/localization/index.ts","common/localization/lang/en.ts","common/localization/lang/ru.ts","state/filter/actionTypes.ts","state/filter/reducer.ts","state/rootReducers/index.ts","common/store/index.ts","index.tsx"],"names":["createContext","theme","setTheme","t","history","createBrowserHistory","basename","process","LeftMenu","intl","useIntl","curPath","useLocation","pathname","useState","visible","setVisible","navModulesList","navId","label","formatMessage","id","defaultMessage","path","onClose","onMouseDown","className","icon","menuOutline","width","height","title","placement","closeIcon","closeOutline","bodyStyle","padding","display","flexDirection","map","isActiveMenuItem","startsWith","clsx","push","onClick","Header","useContext","AppContext","moduleHeader","AppPageContext","HeaderLayout","checked","onChange","axios","create","baseURL","Error","useModal","modal","body","useEffect","openErrorModalWithIcon","message","error","centered","content","requestInterceptor","interceptors","request","use","Promise","reject","responseInterceptor","response","status","statusText","data","eject","AuthLayout","children","appContainer","useRef","Provider","value","ref","AppPage","pageProps","UserOnline","Component","component","rest","render","props","ForKids","Crocodile","App","exact","to","localization","en","Modules","forkids","crocodile","ru","SELECT_APPLICATION","initialState","currentApplication","undefined","reducer","state","action","type","types","payload","appReducers","combineReducers","filter","filterReducer","rootReducers","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","useSelector","ReactDOM","messages","locale","document","getElementById"],"mappings":"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","file":"static/js/main.55221825.chunk.js","sourcesContent":["import { createContext, Dispatch, SetStateAction } from 'react';\r\n\r\ninterface ThemeProps {\r\n  theme: 'light' | 'dark';\r\n  setTheme: Dispatch<SetStateAction<'light' | 'dark'>>\r\n}\r\n\r\nexport default createContext({\r\n  theme: 'light',\r\n  setTheme: (t) => t,\r\n} as ThemeProps);\r\n","import { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\r\n\r\nexport default history;\r\n","import { FC, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport { Drawer } from 'antd';\r\nimport { Icon } from '@iconify/react';\r\nimport closeOutline from '@iconify-icons/eva/close-outline';\r\nimport menuOutline from '@iconify-icons/eva/menu-outline';\r\nimport history from 'common/utils/historyUtils';\r\n\r\nconst LeftMenu: FC = (): JSX.Element => {\r\n  const intl = useIntl();\r\n  const { pathname: curPath } = useLocation();\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const navModulesList: NavModulesList[] = [\r\n    {\r\n      navId: 0,\r\n      label: intl.formatMessage({ id: 'forkids', defaultMessage: 'For Kids' }),\r\n      path: '/forkids',\r\n    },\r\n    {\r\n      navId: 1,\r\n      label: intl.formatMessage({ id: 'crocodile', defaultMessage: 'Crocodile' }),\r\n      path: '/crocodile',\r\n    },\r\n  ];\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const onToggle = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  const onClick = (path: string) => {\r\n    history.push(path);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div onMouseDown={onToggle} className=\"menu-button cursor-pointer select-none\">\r\n        <Icon icon={menuOutline} width={32} height={32}/>\r\n      </div>\r\n      <Drawer\r\n        className=\"left-menu\"\r\n        title={(\r\n          <span\r\n            className=\"text-xl text-black font-bold\"\r\n          >\r\n            <FormattedMessage\r\n              id=\"Modules\"\r\n              defaultMessage=\"Modules\"\r\n            />\r\n          </span>\r\n        )}\r\n        placement=\"left\"\r\n        onClose={onClose}\r\n        visible={visible}\r\n        closeIcon={<Icon icon={closeOutline} width={22} height={22}/>}\r\n        bodyStyle={{\r\n          padding: 0,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n        width={320}\r\n      >\r\n        {\r\n          navModulesList.map(({ navId, label, path }) => {\r\n            const isActiveMenuItem = curPath.startsWith(path) || (curPath === '/' && navId === 0);\r\n            return (\r\n              <div key={navId} className=\"cursor-pointer\">\r\n                <div className={clsx('text-base menu-item', isActiveMenuItem && 'active')}\r\n                     onMouseDown={() => onClick(path)}>\r\n                  {label}\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LeftMenu;\r\n","import { createContext } from 'react';\r\n\r\nexport default createContext({\r\n  title: '',\r\n});\r\n","import { FC, useContext } from 'react';\r\nimport clsx from 'clsx';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { Layout, Switch } from 'antd';\r\nimport LeftMenu from 'components/common/LeftMenu';\r\nimport AppContext from 'common/AppContext';\r\nimport AppPageContext from 'components/common/AppPageContext';\r\n\r\nconst Header: FC = (): JSX.Element => {\r\n  const { theme, setTheme } = useContext(AppContext);\r\n  const { title: moduleHeader } = useContext(AppPageContext);\r\n\r\n  const { Header: HeaderLayout } = Layout;\r\n\r\n  const change = () => {\r\n    setTheme((t: 'light' | 'dark'): 'light' | 'dark' => (t === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HeaderLayout className=\"shadow-lg flex items-center\">\r\n        {<LeftMenu/>}\r\n        <div className={clsx('flex flex-col pt-10 pb-10')}>\r\n            <span className={clsx('text-sm')}>\r\n              <FormattedMessage\r\n                id=\"Rainbow apps\"\r\n                defaultMessage=\"Rainbow apps\"\r\n              />\r\n            </span>\r\n          <span className=\"text-lg font-bold leading-10\">{moduleHeader}</span>\r\n        </div>\r\n        <div className=\"flex items-center hidden\">\r\n            <span\r\n              className={clsx('pr-14 t text-white opacity-75 hover:opacity-100',\r\n                'cursor-pointer transition duration-300 font-light')}\r\n            >\r\n              Dark theme\r\n            </span>\r\n          <Switch checked={theme === 'dark'} onChange={change}/>\r\n        </div>\r\n      </HeaderLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({ baseURL: `${process.env.PUBLIC_URL}` });\r\n","import { FC, useEffect } from 'react';\r\nimport axios from 'common/axios';\r\nimport { Modal } from 'antd';\r\nimport {\r\n  AxiosError, AxiosResponse, AxiosRequestConfig,\r\n} from 'axios';\r\nimport { ModalFuncProps } from 'antd/lib/modal/Modal';\r\n\r\nconst Error: FC = (): JSX.Element => {\r\n  const [modal, body] = Modal.useModal();\r\n\r\n  useEffect(() => {\r\n    const config = (content: string): ModalFuncProps => ({\r\n      title: 'Error',\r\n      centered: true,\r\n      content,\r\n    });\r\n\r\n    const openErrorModalWithIcon = (message: string) => {\r\n      modal.error(config(message));\r\n    };\r\n\r\n    const requestInterceptor = axios.interceptors.request.use(\r\n      (request: AxiosRequestConfig): AxiosRequestConfig => request,\r\n      (error: AxiosError): Promise<AxiosError> => Promise.reject(error),\r\n    );\r\n\r\n    const responseInterceptor = axios.interceptors.response.use(\r\n      (response: AxiosResponse): AxiosResponse => response,\r\n      (error: AxiosError): Promise<AxiosError> => {\r\n        if (error.response) {\r\n          const { status, statusText, data } = error.response;\r\n\r\n          if (status >= 500) {\r\n            if (typeof data === 'string') {\r\n              openErrorModalWithIcon(data);\r\n            } else {\r\n              openErrorModalWithIcon(`Invalid HTTP response status ${status} (${statusText})`);\r\n            }\r\n          }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n      },\r\n    );\r\n\r\n    return () => {\r\n      axios.interceptors.request.eject(requestInterceptor);\r\n      axios.interceptors.response.eject(responseInterceptor);\r\n    };\r\n  }, [modal]);\r\n\r\n  return body;\r\n};\r\n\r\nexport default Error;\r\n","import { FC, useRef, useState } from 'react';\r\nimport AppContext from 'common/AppContext';\r\nimport Header from 'components/common/Header';\r\nimport Error from 'components/common/Error';\r\n\r\nconst AuthLayout: FC = ({ children }): JSX.Element => {\r\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\r\n  const appContainer = useRef<HTMLDivElement | null>(null);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ theme, setTheme }}>\r\n      <div className={`theme-${theme} absolute inset-0 overflow-hidden`} ref={appContainer}>\r\n        <div className=\"absolute inset-0 overflow-hidden flex flex-col bg-ivory transition duration-300\">\r\n          <Header/>\r\n\r\n          {children}\r\n\r\n          <Error/>\r\n        </div>\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthLayout;\r\n","import { FC } from 'react';\r\nimport AuthLayout from 'components/common/AuthLayout';\r\nimport AppPageContext from 'components/common/AppPageContext';\r\n\r\nexport interface Props {\r\n  pageProps?: PageProps;\r\n}\r\n\r\nconst AppPage: FC<Props> = ({ pageProps = { title: '' }, children }): JSX.Element | null => (\r\n  <AppPageContext.Provider value={pageProps}>\r\n    <AuthLayout>\r\n      {children}\r\n    </AuthLayout>\r\n  </AppPageContext.Provider>\r\n);\r\n\r\nexport default AppPage;\r\n","import { FC } from 'react';\r\nimport { Route, RouteProps } from 'react-router-dom';\r\nimport AppPage from 'components/common/AppPage';\r\n\r\ninterface Props extends RouteProps {\r\n  pageProps?: PageProps\r\n}\r\n\r\nconst UserOnline: FC<Props> = ({\r\n  component: Component, children, pageProps, ...rest\r\n}) => {\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        <AppPage pageProps={pageProps}>\r\n          {Component ? <Component {...props} /> : children}\r\n        </AppPage>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default UserOnline;\r\n","import { FC } from 'react';\r\n\r\nimport './ForKids.scss';\r\n\r\nconst ForKids: FC = (): JSX.Element => {\r\n\r\n  return (\r\n    <div\r\n      className={'flex justify-between items-end center pb-4 z-50'}\r\n    >\r\n      For kids\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForKids;\r\n","import { FC } from 'react';\r\n\r\nimport './Crocodile.scss';\r\n\r\nconst Crocodile: FC = (): JSX.Element => {\r\n\r\n  return (\r\n    <div\r\n      className={'flex justify-between items-end center pb-4 z-50'}\r\n    >\r\n      Crocodile\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Crocodile;\r\n","import { FC } from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UserOnline from './routes/Private/UserOnline';\r\nimport ForKids from './Dashboard/ForKids/ForKids';\r\nimport Crocodile from './Dashboard/Crocodile/Crocodile';\r\nimport { useIntl } from 'react-intl';\r\n\r\nconst App: FC = (): JSX.Element => {\r\n  const intl = useIntl();\r\n\r\n  return (\r\n        <Switch>\r\n            <UserOnline exact path=\"/\">\r\n                <Redirect to=\"/forkids\"/>\r\n            </UserOnline>\r\n            <UserOnline path=\"/forkids\" component={ForKids}\r\n                        pageProps={{ title: intl.formatMessage({ id: 'forkids', defaultMessage: 'For Kids' }) }}/>\r\n            <UserOnline path=\"/crocodile\" component={Crocodile}\r\n                        pageProps={{ title: intl.formatMessage({ id: 'crocodile', defaultMessage: 'Crocodile' }) }}/>\r\n\r\n            {/*MUST BE THE LAST ROUTE*/}\r\n            <Route exact path=\"*\">\r\n                <Redirect to=\"/forkids\"/>\r\n            </Route>\r\n        </Switch>\r\n  );\r\n};\r\nexport default App;\r\n","import enLang from './lang/en';\nimport ruLang from './lang/ru';\n\nconst localization = {\n  en: enLang,\n  ru: ruLang,\n};\n\nexport default localization;\n","const en = {\n  'Rainbow apps': 'Rainbow apps',\n  Modules: 'Modules',\n  forkids: 'For Kids',\n  crocodile: 'Crocodile',\n};\n\nexport default en;\n","const en = {\n  'Rainbow apps': 'Радужные программы',\n  Modules: 'Программы',\n  forkids: 'Для детей',\n  crocodile: 'Крокодил',\n};\n\nexport default en;\n","export const SELECT_APPLICATION = 'root/SELECT_APPLICATION';\r\n","import * as types from 'state/filter/actionTypes';\r\nimport { ActionsTypes } from 'state/filter/actions';\r\n\r\nexport interface FilterState {\r\n  currentApplication: string | undefined;\r\n}\r\n\r\nconst initialState: FilterState = {\r\n  currentApplication: undefined,\r\n};\r\n\r\nconst reducer = (state = initialState, action: ActionsTypes): FilterState => {\r\n  switch (action.type) {\r\n    case types.SELECT_APPLICATION:\r\n      return { ...state, currentApplication: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport filterReducer from '../filter/reducer';\r\nimport { SelectApplication } from '../filter/actions';\r\n\r\n\r\nconst appReducers = combineReducers({\r\n  filter: filterReducer,\r\n});\r\n\r\nconst rootReducers = (state: ReturnType<typeof appReducers> | undefined, action: SelectApplication) => {\r\n  return appReducers(state, action);\r\n};\r\n\r\nexport default rootReducers;\r\n","import { createStore, applyMiddleware, Middleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducers from 'state/rootReducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\n\r\nconst middlewares: Middleware[] = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // Logger for Redux\r\n  // const { createLogger } = require('redux-logger');\r\n  // const logger: Middleware = createLogger({ collapsed: true });\r\n  // middleware.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(...middlewares)));\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n/** Application specific strongly typed wrapper around redux's useSelector() and useDispatch() */\r\nexport const useAppDispatch = () => useDispatch<any>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport default store;\r\n","import ReactDOM from 'react-dom';\r\nimport { Router } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { IntlProvider } from 'react-intl';\r\nimport App from 'components/App';\r\nimport localization from 'common/localization';\r\nimport store from 'common/store';\r\nimport history from 'common/utils/historyUtils';\r\n\r\nimport 'styles/main.scss';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <IntlProvider messages={localization.ru} locale=\"ru\">\r\n      <Router history={history}>\r\n        <App/>\r\n      </Router>\r\n    </IntlProvider>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}